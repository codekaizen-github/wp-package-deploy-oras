pipeline {
    agent none
    environment {
        GHCR_REGISTRY = 'ghcr.io' // GitHub Container Registry
        GHCR_USER = 'ASDFASDF' // This can technically be anything. The GitHub PAT is what actually authenticates to GHCR.
        // GHCR_REPOSITORY = 'your-github-username/your-image-name' # Actually, get this dynamically from Jenkins env vars
        GHCR_CREDENTIALS_ID = 'jenkins-github-ghcr-pat-token-andrewjdawes' // Jenkins Credentials ID for a GitHub PAT Token with read/write access to GHCR packages
    }
    stages {
        stage('Build and Test') {
            matrix {
                axes {
                    axis {
                        name 'PHP_VERSION'
                        values '8.1', '8.2', '8.3', '8.4'
                    }
                }
                agent {
                    dockerfile {
                        filename 'Dockerfile'
                        dir '.'
                        additionalBuildArgs "--target final --build-arg PHP_VERSION=${PHP_VERSION}"
                        reuseNode false
                    }
                }
                stages {
                    stage('Run Static Analysis and Tests') {
                        steps {
                            sh "composer install"
                            sh "composer run analyze"
                            sh "composer run test"
                            sh "composer run sniff"
                        }
                    }
                }
            }
        }
        stage('Define vars') {
            agent any
            steps {
                script {
                    def gitUrl = env.GIT_URL
                    def matcher = gitUrl =~ /https:\/\/github\.com\/([^\/]+)\/([^\/]+)\.git/
                    if (matcher.matches()) {
                        env.GITHUB_REPOSITORY_OWNER = matcher[0][1]
                        env.GITHUB_REPOSITORY_NAME = matcher[0][2]
                        echo "Owner: ${env.GITHUB_REPOSITORY_OWNER}, Repo: ${env.GITHUB_REPOSITORY_NAME}"
                    } else {
                        error "Failed to extract owner and repo from GIT_URL"
                    }
                    // When building the main branch, use the 'latest' tag
                    env.DYNAMIC_TAG_NAME = (env.GIT_BRANCH == 'main' ? 'latest' : env.GIT_BRANCH).replaceAll('/', '-')
                    env.GHCR_REPOSITORY = "${env.GITHUB_REPOSITORY_OWNER}/${env.GITHUB_REPOSITORY_NAME}".toLowerCase()
                    env.LABEL_ORG_OPENCONTAINERS_IMAGE_SOURCE = "https://github.com/${env.GITHUB_REPOSITORY_OWNER}/${env.GITHUB_REPOSITORY_NAME}"
                }
            }
        }
        stage('Build and Push Images') {
            matrix {
                axes {
                    axis {
                        name 'ARCH'
                        values 'amd64', 'arm64'
                    }
                    axis {
                        name 'DOCKER_STAGE'
                        values 'final' // Add more stages if needed
                    }
                }
                agent { label "docker && ${ARCH}" }
                stages {
                    stage('Build and Push') {
                        steps {
                            script {
                                withCredentials([string(credentialsId: GHCR_CREDENTIALS_ID, variable: 'GHCR_PAT')]) {
                                    sh '''
                                    echo "${GHCR_PAT}" | docker login "${GHCR_REGISTRY}" -u "${GHCR_USER}" --password-stdin
                                    docker build --label "org.opencontainers.image.source=${LABEL_ORG_OPENCONTAINERS_IMAGE_SOURCE}" --target ${DOCKER_STAGE} --build-arg ARCH=${ARCH} -t ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${DYNAMIC_TAG_NAME}-${DOCKER_STAGE}-${ARCH} .
                                    docker image inspect ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${DYNAMIC_TAG_NAME}-${DOCKER_STAGE}-${ARCH}
                                    docker push ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${DYNAMIC_TAG_NAME}-${DOCKER_STAGE}-${ARCH}
                                    '''
                                }
                            }
                        }
                    }
                }
            }
        }
        stage('Create and Push Stage Specific Manifests') {
            matrix {
                axes {
                    axis {
                        name 'DOCKER_STAGE'
                        values 'final' // Add more stages if needed
                    }
                }
                agent { label 'docker' }
                environment {
                    ARCHS = 'amd64 arm64'
                }
                stages {
                    stage('Push Manifest') {
                        steps {
                            script {
                                withCredentials([string(credentialsId: GHCR_CREDENTIALS_ID, variable: 'GHCR_PAT')]) {
                                    sh '''
                                    echo "${GHCR_PAT}" | docker login ${GHCR_REGISTRY} -u "${GHCR_USER}" --password-stdin
                                    manifest_tag="${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${DYNAMIC_TAG_NAME}-${DOCKER_STAGE}"
                                    # Remove manifest if exists
                                    docker manifest rm $manifest_tag || true
                                    # Build manifest create command
                                    manifest_create_cmd="docker manifest create $manifest_tag"
                                    for arch in $ARCHS; do
                                      manifest_create_cmd="$manifest_create_cmd ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${DYNAMIC_TAG_NAME}-${DOCKER_STAGE}-$arch"
                                    done
                                    manifest_create_cmd="$manifest_create_cmd --amend"
                                    eval $manifest_create_cmd
                                    # Annotate for each arch
                                    for arch in $ARCHS; do
                                      docker manifest annotate $manifest_tag ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${DYNAMIC_TAG_NAME}-${DOCKER_STAGE}-$arch --os linux --arch $arch
                                    done
                                    docker manifest inspect $manifest_tag
                                    docker manifest push $manifest_tag --purge
                                    '''
                                }
                            }
                        }
                    }
                }
            }
        }
        stage('Create and Push Final Manifest') {
            agent { label 'docker' }
            environment {
                ARCHS = 'amd64 arm64'
                DOCKER_STAGE = 'final' // Ensure this matches the stage used in the build step
            }
            steps {
                script {
                    withCredentials([string(credentialsId: GHCR_CREDENTIALS_ID, variable: 'GHCR_PAT')]) {
                        sh '''
                        echo "${GHCR_PAT}" | docker login ${GHCR_REGISTRY} -u "${GHCR_USER}" --password-stdin
                        manifest_tag="${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${DYNAMIC_TAG_NAME}"
                        # Remove manifest if exists
                        docker manifest rm $manifest_tag || true
                        # Build manifest create command
                        manifest_create_cmd="docker manifest create $manifest_tag"
                        for arch in $ARCHS; do
                          manifest_create_cmd="$manifest_create_cmd ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${DYNAMIC_TAG_NAME}-${DOCKER_STAGE}-$arch"
                        done
                        manifest_create_cmd="$manifest_create_cmd --amend"
                        eval $manifest_create_cmd
                        # Annotate for each arch
                        for arch in $ARCHS; do
                          docker manifest annotate $manifest_tag ${GHCR_REGISTRY}/${GHCR_REPOSITORY}:${DYNAMIC_TAG_NAME}-${DOCKER_STAGE}-$arch --os linux --arch $arch
                        done
                        docker manifest inspect $manifest_tag
                        docker manifest push $manifest_tag --purge
                        '''
                    }
                }
            }
        }
    }
}
